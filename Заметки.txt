Вью это набор 

Вью создан в парадигме реактивного программирования

Вью работает с виртуальным DOM , это улучшает производительность приложения

Виртуальная копия реального дом-дерева 

При изменении реального дом-дерева, сначала меняется реальное дом-дерево, потом вью сравнивает состояние реального и виртуального дом-дерева,
ищет оптимальный путь, чтобы реальное дом дерево соответстовало виртуальному 
Вью не будет работать со всем body 

Для Вью 

Атрибут v-model связывает пользовательский ввод или вывод с каким то свойством, из объекта который возвращает метод data

Интерполяция текста - вставка текста в HTML из JS
сли нужно вывести значения, нужно поставить {{}}  вписать туда переменную которую хотим вывести

метод .mount монтирует экземпляр vue (возвращает)

в фигурных скобках можно выводить переменных, или любое валидное JS выражение (a+b, тернарные операторы и тд.)

Всё что мы запишем в globalProperties будут доступны всем компонентам Vue

v-for - перебор 


Занятие 2

Добавление обработчика события:

v-on: click=""
@click=""

Если мы работает с Vue, можно работать обычные атрибуты из html 

Если привязка класса идет в таком виде v-bind: class="color" - то это имя свойства из объекта Vue 

класс active должен быть в css - имя класса, currentTab === tab, условие при котором класс добавитсяя к элементу 

Если метод не принимает аргументов, то пишем название метода (без круглых скобок)
Если метод принимает аргументы, то ставим крглые скобки и пишем любые аргументы

Все методы которые должны сработать при наступлении каких-то событий описываются в объекте methods 

В значение:key уникальное значение из элементов массива

Вычисляемые свойства будут пересчитываться, когда изменитя значение myList (Lesson2)

ДЗ: методы оброботчика событий, v-show, v-if, v-for зачем нуен key, привязка атрибутов, привязка классов, 


Занятие 3

v-model.trim= - удаляет пробелы сначала и сконца строки 

при любом множественном выборе (чекбоксов, селектов) будет сохранять данные в массив

при работе с Vue и с v-model выбор по умолчанию селектов и чекбоксов - работать не будет (игнорируется)

v-model.number= - преобразует в число данные из формы ( для чисел)

если у импутов одинаковое значение name , это группа чекбоксов 

У чекбоксов обязательно указывать value чтобы было понятно что выбрал пользователь

.prevent отмена события по умолчанию 

target - элемент на котором произошло событие, доступно у формы

Со стороны JS данные на сервер можно отправить несколькими способами:
1. XMLHttpRequest - поддерживается всеми браузерами
2. fetch() - современная и удобная, нельзя отследить сколько загружено и сколько осталось 
axios - библиотека для отправки ajax запросов (отправка без перезагрузки)

Чтобы создать promise - пишем new Promise (обещание)
-неизвестно сколько времени выполняется данная функция
- функция выполняется ассинхронно
Сама по себе функция promise принимает на вход еще 2 функции, первая функция вызываетсяя в случае успешного разрешения promise (всё хорошо внутри promise)
код выполняется без ошибок, если есть ошибки, выполняется вторая функция 
Promise не надо вызывать, код начинает выполняться сразу после создания

У Promise есть 3 состояния, первое называется pending - код в процессе выолнения (выполняется),
второе состояние fulfilled - код выполнения завершился успехом, 
третье rejected - завершил работу, но с ошибкой 

У Promise есть метод .then и метод .catch

Объявление:
let promise = new Promise(function (resolve, reject) {
    setTimeout(() => {
        let data = Math.random();
        if (data < 0.5) {
            resolve(`Код выполнился ${data}`);
        } else {
            reject(`Выполнение привело к ошибке ${data}`)
        }
    }, Math.floor(Math.random() * 20000))
});
console.log(promise)


Использование promise 
promise
    .then((successData) => {
        console.log(`SUCCESS ${successData}`);
        return {info: successData}
    })
    .then((returnData)=>{
        console.log(returnData);
    })
    .catch((errorData) => {
        console.log(`ERROR ${errorData}`)
    });

в метод .then передается функция, вызывается в случае успеха promise и копируется в первую переменную 
метод .then возвращает объект promise

в метод .catch вызывается в случае неуспеха, вызывается вторая функция 

Если функция переданная в метод then возвращает какой-то результат, то эти данные мы можем получить при втором вызове then 

async перед функцией, позволяет использовать await внутри функции 
ждет пока выполнится promise


Фунция fetch первым элементом принимает куда нужно отправить данные (адрес сервера) , вторым аргументом - настройки запроса
функция fetch возвращает promise, тип данных которые возвращает promise 

Когда запрос выполнится и мы получим объект (в виде объекта), у объекта ответа мы получим данные которые прислал сервер 
Если сервер возвращает какую-то строчку, то получить ее мы можем методом .text() , если JSON строчку, то методом JSON



















